// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using PRN232.Lab2.CoffeeStore.Repositories.Entities;
using System;
using System.Collections.Generic;

namespace PRN232.Lab2.CoffeeStore.Repositories.Data;

public partial class CoffeeStoreDB2Context : IdentityDbContext<User, IdentityRole<Guid>, Guid>
{

    public CoffeeStoreDB2Context(DbContextOptions<CoffeeStoreDB2Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Product> Products { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__Category__19093A0B3FE1E545");

            entity.ToTable("Category");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Order__C3905BCFC96C9EBD");

            entity.ToTable("Order");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.OrderDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.HasOne(d => d.User).WithMany(p => p.Orders)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Order__UserId__2312390AV823");

            entity.HasOne(d => d.Payment).WithMany(p => p.Orders)
                .HasForeignKey(d => d.PaymentId)
                .HasConstraintName("FK_Order_Payment");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasKey(e => e.OrderDetailId).HasName("PK__OrderDet__D3B9D36C37520D71");

            entity.ToTable("OrderDetail");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__OrderDeta__Order__48CFD27E");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__OrderDeta__Produ__49C3F6B7");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payment__9B556A386C7B750F");

            entity.ToTable("Payment");

            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.PaymentDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);

            entity.HasOne(d => d.Order).WithMany(p => p.Payments)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_Payment_Order");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__Product__B40CC6CDEEAA9C7A");

            entity.ToTable("Product");

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__Product__Categor__3B75D760");
        });


        modelBuilder.Entity<IdentityRole<Guid>>().HasData(SeedingRoles());
        modelBuilder.Entity<User>().HasData(SeedingUsers());
        modelBuilder.Entity<IdentityUserRole<Guid>>().HasData(SeedingUserRoles());

        OnModelCreatingPartial(modelBuilder);
    }

    private ICollection<IdentityRole<Guid>> SeedingRoles()
    {
        return new List<IdentityRole<Guid>>()
            {
                new IdentityRole<Guid>
                {
                    Id = Guid.Parse("3631e38b-60dd-4d1a-af7f-a26f21c2ef82"),
                    Name = "Admin",
                    NormalizedName = "ADMIN",
                    ConcurrencyStamp = "seed-1"
                },
                new IdentityRole<Guid>
                {
                    Id = Guid.Parse("51ef7e08-ff07-459b-8c55-c7ebac505103"),
                    Name = "Staff",
                    NormalizedName = "STAFF",
                    ConcurrencyStamp = "seed-2"
                },
                new IdentityRole<Guid>
                {
                    Id = Guid.Parse("37a7c5df-4898-4fd4-8e5f-d2abd4b57520"),
                    Name = "User",
                    NormalizedName = "USER",
                    ConcurrencyStamp = "seed-3"
                }
            };
    }

    private ICollection<User> SeedingUsers()
    {
        var hasher = new PasswordHasher<User>();

        var admin = new User
        {
            Id = Guid.Parse("33f41895-b601-4aa1-8dc4-8229a9d07008"),
            UserName = "admin",
            NormalizedUserName = "ADMIN",
            Email = "admin@example.com",
            NormalizedEmail = "ADMIN@EXAMPLE.COM",
            EmailConfirmed = true,
            SecurityStamp = "seed-4",
            ConcurrencyStamp = "seed-5",
            PasswordHash = hasher.HashPassword(null!, "12345aA@")
        };

        var teacher = new User
        {
            Id = Guid.Parse("09097277-2705-40c2-bce5-51dbd1f4c1e6"),
            UserName = "teacher",
            NormalizedUserName = "TEACHER",
            Email = "teacher@example.com",
            NormalizedEmail = "TEACHER@EXAMPLE.COM",
            EmailConfirmed = true,
            SecurityStamp = "seed-6",
            ConcurrencyStamp = "seed-7",
            PasswordHash = hasher.HashPassword(null!, "12345aA@")
        };

        var parent = new User
        {
            Id = Guid.Parse("fe014130-bfb5-443b-9989-9c8f90d1065f"),
            UserName = "parent",
            NormalizedUserName = "PARENT",
            Email = "parent@example.com",
            NormalizedEmail = "PARENT@EXAMPLE.COM",
            EmailConfirmed = true,
            SecurityStamp = "seed-8",
            ConcurrencyStamp = "seed-9",
            PasswordHash = hasher.HashPassword(null!, "12345aA@")
        };

        return new List<User> { admin, teacher, parent };
    }

    private ICollection<IdentityUserRole<Guid>> SeedingUserRoles()
    {
        return new List<IdentityUserRole<Guid>>
            {
                new IdentityUserRole<Guid>
                {
                    UserId = Guid.Parse("33f41895-b601-4aa1-8dc4-8229a9d07008"),
                    RoleId = Guid.Parse("3631e38b-60dd-4d1a-af7f-a26f21c2ef82")
                },
                new IdentityUserRole<Guid>
                {
                    UserId = Guid.Parse("09097277-2705-40c2-bce5-51dbd1f4c1e6"),
                    RoleId = Guid.Parse("51ef7e08-ff07-459b-8c55-c7ebac505103")
                },
                new IdentityUserRole<Guid>
                {
                    UserId = Guid.Parse("fe014130-bfb5-443b-9989-9c8f90d1065f"),
                    RoleId = Guid.Parse("37a7c5df-4898-4fd4-8e5f-d2abd4b57520")
                }
            };
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}